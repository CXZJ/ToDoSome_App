name: TodoList CI/CD

on:
  push:
    branches: [master]
    paths-ignore: ["README.md"]
  pull_request:
    branches: [master]

jobs:
  continuous-integration:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Backend Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/todolist-backend:latest ./server
          docker push ${{ secrets.DOCKER_USERNAME }}/todolist-backend:latest

      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/todolist-frontend:latest ./client
          docker push ${{ secrets.DOCKER_USERNAME }}/todolist-frontend:latest

  continuous-deployment:
    name: Continuous Deployment
    needs: continuous-integration
    runs-on: self-hosted

    steps:
      - name: Set Docker Env for Rootless
        run: |
          echo "DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock" >> $GITHUB_ENV
          export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub (again in self-hosted)
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull Latest Backend Image
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/todolist-backend:latest

      - name: Pull Latest Frontend Image
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/todolist-frontend:latest

      - name: Stop & Clean Up Existing Containers
        run: |
          docker-compose down || true
          docker system prune -f -a --volumes || true

      - name: Run New Containers
        run: |
          docker-compose up -d
        env:
          PORT: ${{ secrets.PORT }}
          CONNECTION_URL: ${{ secrets.CONNECTION_URL }}
          CLIENT_URL: ${{ secrets.CLIENT_URL }}
          REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}

      - name: Connect Containers to Cloudflare Tunnel Network
        run: |
          docker network connect ${{ secrets.TUNNEL_NAME }} todolist-backend || true
          docker network connect ${{ secrets.TUNNEL_NAME }} todolist-frontend || true
